import pulumi
import pulumi_eks as eks
import pulumi_aws as aws
import pulumi_kubernetes as k8s

def create_eks_cluster(base_eks_cluster_name, eks_vpc, current_user):
    # Get some values from the Pulumi configuration (or use defaults)
    config = pulumi.Config()
    min_cluster_size = config.get_int("minClusterSize") or 3
    max_cluster_size = config.get_int("maxClusterSize") or 6
    desired_cluster_size = config.get_int("desiredClusterSize") or 3
    eks_node_instance_type = config.get("eksNodeInstanceType") or "t3.medium"

    eks_vpc_id = eks_vpc.vpc_id

    eks_vpc_subnet_ids = pulumi.Output.all(eks_vpc.public_subnet_ids, eks_vpc.private_subnet_ids).apply(
        lambda ids: ids[0] + ids[1]
    )

    eks_cluster = eks.Cluster(base_eks_cluster_name,
                              vpc_id=eks_vpc_id,
                              subnet_ids=eks_vpc_subnet_ids,
                              instance_type=eks_node_instance_type,
                              desired_capacity=desired_cluster_size,
                              min_size=min_cluster_size,
                              max_size=max_cluster_size,
                              )

    # Export the kubeconfig
    pulumi.export('kubeconfig', eks_cluster.kubeconfig)

    # Create a k8s provider
    k8s_provider = k8s.Provider("k8s-provider", kubeconfig=eks_cluster.kubeconfig)

    # Deploy the EBS CSI driver using Helm
    ebs_csi_driver = k8s.helm.v3.Release(
        "ebs-csi-driver",
        chart="aws-ebs-csi-driver",
        version="2.4.0",  # Specify the version you want to install
        repository_opts=k8s.helm.v3.RepositoryOptsArgs(
            repo="https://kubernetes-sigs.github.io/aws-ebs-csi-driver"
        ),
        namespace="kube-system",
        values={
            "controller": {
                "region": aws.config.region
            }
        },
        opts=pulumi.ResourceOptions(provider=k8s_provider)
    )

    # Export values to use elsewhere
    pulumi.export("ebs_csi_driver_status", ebs_csi_driver.status)

    # Create a Persistent Volume and Persistent Volume Claim to test the EBS CSI driver
    pv = k8s.core.v1.PersistentVolume(
        "pv",
        spec=k8s.core.v1.PersistentVolumeSpecArgs(
            capacity={"storage": "10Gi"},
            access_modes=["ReadWriteOnce"],
            persistent_volume_reclaim_policy="Retain",
            storage_class_name="gp2",
            csi=k8s.core.v1.CSIPersistentVolumeSourceArgs(
                driver="ebs.csi.aws.com",
                volume_handle="my-ebs-volume"
            )
        ),
        opts=pulumi.ResourceOptions(provider=k8s_provider)
    )

    pvc = k8s.core.v1.PersistentVolumeClaim(
        "pvc",
        spec=k8s.core.v1.PersistentVolumeClaimSpecArgs(
            access_modes=["ReadWriteOnce"],
            resources=k8s.core.v1.ResourceRequirementsArgs(
                requests={"storage": "10Gi"}
            ),
            storage_class_name="gp2"
        ),
        opts=pulumi.ResourceOptions(provider=k8s_provider)
    )

    return eks_cluster
